######To start with (you need to download the several packages from "Install Package(s)":
library(twitteR)

library(stringr)

library(plyr)

library(igraph)

library(ggplot2)

library(xts)

##### To draw a network among people who tweeted #Sandy
####search for English tweets mentioning #Sandy
Sandy.tweets=searchTwitter('#Sandy', n=1000, lang="en")
df <- do.call("rbind", lapply(Sandy.tweets, as.data.frame))
names(df)

counts=table(df$screenName)
barplot(counts,las=2,cex.names =0.3)
# Let's do something hacky:
# Limit the data set to show only folk who tweeted twice or more in the sample
cc=subset(counts,counts>1)
barplot(cc,las=2,cex.names =0.3)

#Here's a hacky defense that seemed to work...
df$text=sapply(df$text,function(row) iconv(row,to='UTF-8'))
 
#A helper function to remove @ symbols from user names...
trim <- function (x) sub('@','',x)

#A couple of tweet parsing functions that add columns to the dataframe
#Pull out who a message is to
df$to=sapply(df$text,function(tweet) str_extract(tweet,"^(@[[:alnum:]_]*)"))
df$to=sapply(df$to,function(name) trim(name))

#And here's a way of grabbing who's been RT'd
df$rt=sapply(df$text,function(tweet) trim(str_match(tweet,"^RT (@[[:alnum:]_]*)")[2]))

#####Show the stats about people being RTed
a<-sort(table(na.omit(df$rt)))
a
####create a plot of people with counts of being RTed
ggplot()+geom_bar(aes(x=na.omit(df$rt)))+theme(axis.text.x=element_text(angle=-90,size=6))+xlab(NULL)

###timeline analysis
username='BarackObama'
#the most tweets we can bring back from a user timeline is the most recent 3600...
mht=userTimeline(username,n=3200)
tw.df=twListToDF(mht)


#The xts function creates a timeline from a vector of values and a vector of timestamps.
#If we know how many tweets we have, we can just create a simple list or vector containing that number of 1s
ts=xts(rep(1,times=nrow(tw.df)),tw.df$created)
#We can now do some handy number crunching on the timeseries, such as applying a formula to values contained with day, week, month, quarter or year time bins.
#So for example, if we sum the unit values in daily bin, we can get a count of the number of tweets per day
ts.sum=apply.daily(ts,sum)
#also apply. weekly, monthly, quarterly, yearly
#If for any resason we need to turn the timeseries into a dataframe, we can:
#http://stackoverflow.com/a/3387259/454773
ts.sum.df=data.frame(date=index(ts.sum), coredata(ts.sum))
colnames(ts.sum.df)=c('date','sum')
#We can then use ggplot to plot the timeseries...
ggplot(ts.sum.df)+geom_line(aes(x=date,y=sum))
